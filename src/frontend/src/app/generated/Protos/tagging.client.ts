// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Protos/tagging.proto" (package "tagging", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TaggingGrpcService } from "./tagging";
import type { ListTagsResponse } from "./tagging";
import type { ListTagsRequest } from "./tagging";
import type { Empty } from "../google/protobuf/empty";
import type { DeleteTagRequest } from "./tagging";
import type { UpdateTagRequest } from "./tagging";
import type { GetTagRequest } from "./tagging";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Tag } from "./tagging";
import type { CreateTagRequest } from "./tagging";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service tagging.TaggingGrpcService
 */
export interface ITaggingGrpcServiceClient {
    /**
     * @generated from protobuf rpc: CreateTag(tagging.CreateTagRequest) returns (tagging.Tag);
     */
    createTag(input: CreateTagRequest, options?: RpcOptions): UnaryCall<CreateTagRequest, Tag>;
    /**
     * @generated from protobuf rpc: GetTag(tagging.GetTagRequest) returns (tagging.Tag);
     */
    getTag(input: GetTagRequest, options?: RpcOptions): UnaryCall<GetTagRequest, Tag>;
    /**
     * @generated from protobuf rpc: UpdateTag(tagging.UpdateTagRequest) returns (tagging.Tag);
     */
    updateTag(input: UpdateTagRequest, options?: RpcOptions): UnaryCall<UpdateTagRequest, Tag>;
    /**
     * @generated from protobuf rpc: DeleteTag(tagging.DeleteTagRequest) returns (google.protobuf.Empty);
     */
    deleteTag(input: DeleteTagRequest, options?: RpcOptions): UnaryCall<DeleteTagRequest, Empty>;
    /**
     * @generated from protobuf rpc: ListTags(tagging.ListTagsRequest) returns (tagging.ListTagsResponse);
     */
    listTags(input: ListTagsRequest, options?: RpcOptions): UnaryCall<ListTagsRequest, ListTagsResponse>;
}
/**
 * @generated from protobuf service tagging.TaggingGrpcService
 */
export class TaggingGrpcServiceClient implements ITaggingGrpcServiceClient, ServiceInfo {
    typeName = TaggingGrpcService.typeName;
    methods = TaggingGrpcService.methods;
    options = TaggingGrpcService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateTag(tagging.CreateTagRequest) returns (tagging.Tag);
     */
    createTag(input: CreateTagRequest, options?: RpcOptions): UnaryCall<CreateTagRequest, Tag> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTagRequest, Tag>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTag(tagging.GetTagRequest) returns (tagging.Tag);
     */
    getTag(input: GetTagRequest, options?: RpcOptions): UnaryCall<GetTagRequest, Tag> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTagRequest, Tag>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTag(tagging.UpdateTagRequest) returns (tagging.Tag);
     */
    updateTag(input: UpdateTagRequest, options?: RpcOptions): UnaryCall<UpdateTagRequest, Tag> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTagRequest, Tag>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteTag(tagging.DeleteTagRequest) returns (google.protobuf.Empty);
     */
    deleteTag(input: DeleteTagRequest, options?: RpcOptions): UnaryCall<DeleteTagRequest, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteTagRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListTags(tagging.ListTagsRequest) returns (tagging.ListTagsResponse);
     */
    listTags(input: ListTagsRequest, options?: RpcOptions): UnaryCall<ListTagsRequest, ListTagsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTagsRequest, ListTagsResponse>("unary", this._transport, method, opt, input);
    }
}
