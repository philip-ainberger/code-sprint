// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Protos/coding.proto" (package "coding", syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Tag } from "./tagging";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message coding.Sprint
 */
export interface Sprint {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: coding.Language language = 3;
     */
    language: Language;
    /**
     * @generated from protobuf field: string code_solution = 4;
     */
    codeSolution: string;
    /**
     * @generated from protobuf field: string code_exercise = 5;
     */
    codeExercise: string;
    /**
     * @generated from protobuf field: uint32 solved_count = 6;
     */
    solvedCount: number;
    /**
     * @generated from protobuf field: uint32 failed_count = 7;
     */
    failedCount: number;
    /**
     * @generated from protobuf field: string title = 8;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 9;
     */
    description: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_At = 10;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated tagging.Tag tags = 11;
     */
    tags: Tag[];
}
/**
 * @generated from protobuf message coding.Filter
 */
export interface Filter {
    /**
     * @generated from protobuf field: repeated coding.Language languages = 1;
     */
    languages: Language[];
    /**
     * @generated from protobuf field: repeated string tags = 2;
     */
    tags: string[];
    /**
     * @generated from protobuf field: string fulltext_search = 3;
     */
    fulltextSearch: string;
}
/**
 * @generated from protobuf message coding.CodingActivity
 */
export interface CodingActivity {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf field: int32 count = 2;
     */
    count: number;
}
/**
 * @generated from protobuf message coding.CreateSprintRequest
 */
export interface CreateSprintRequest {
    /**
     * @generated from protobuf field: coding.Language language = 1;
     */
    language: Language;
    /**
     * @generated from protobuf field: string code_solution = 2;
     */
    codeSolution: string;
    /**
     * @generated from protobuf field: string code_exercise = 3;
     */
    codeExercise: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated string tags = 6;
     */
    tags: string[];
}
/**
 * @generated from protobuf message coding.GetSprintRequest
 */
export interface GetSprintRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message coding.CreateSprintResponse
 */
export interface CreateSprintResponse {
    /**
     * @generated from protobuf field: coding.Sprint sprint = 1;
     */
    sprint?: Sprint;
}
/**
 * @generated from protobuf message coding.SolvedSprintRequest
 */
export interface SolvedSprintRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message coding.FailedSprintRequest
 */
export interface FailedSprintRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message coding.UpdateSprintRequest
 */
export interface UpdateSprintRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: coding.Language language = 2;
     */
    language: Language;
    /**
     * @generated from protobuf field: string code_solution = 3;
     */
    codeSolution: string;
    /**
     * @generated from protobuf field: string code_exercise = 4;
     */
    codeExercise: string;
    /**
     * @generated from protobuf field: string title = 5;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 6;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated string tags = 7;
     */
    tags: string[];
}
/**
 * @generated from protobuf message coding.UpdateSprintResponse
 */
export interface UpdateSprintResponse {
    /**
     * @generated from protobuf field: coding.Sprint sprint = 1;
     */
    sprint?: Sprint;
}
/**
 * @generated from protobuf message coding.DeleteSprintRequest
 */
export interface DeleteSprintRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message coding.ListSprintsRequest
 */
export interface ListSprintsRequest {
    /**
     * @generated from protobuf field: uint32 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: coding.Filter filter = 2;
     */
    filter?: Filter;
}
/**
 * @generated from protobuf message coding.ListSprintsResponse
 */
export interface ListSprintsResponse {
    /**
     * @generated from protobuf field: repeated coding.Sprint sprints = 1;
     */
    sprints: Sprint[];
    /**
     * @generated from protobuf field: uint32 total_count = 2;
     */
    totalCount: number;
}
/**
 * @generated from protobuf message coding.GetCodingActivityRequest
 */
export interface GetCodingActivityRequest {
}
/**
 * @generated from protobuf message coding.GetCodingActivityResponse
 */
export interface GetCodingActivityResponse {
    /**
     * @generated from protobuf field: repeated coding.CodingActivity activities = 1;
     */
    activities: CodingActivity[];
}
/**
 * @generated from protobuf enum coding.Language
 */
export enum Language {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: csharp = 1;
     */
    csharp = 1,
    /**
     * @generated from protobuf enum value: powershell = 2;
     */
    powershell = 2,
    /**
     * @generated from protobuf enum value: typescript = 3;
     */
    typescript = 3,
    /**
     * @generated from protobuf enum value: javascript = 4;
     */
    javascript = 4,
    /**
     * @generated from protobuf enum value: java = 5;
     */
    java = 5,
    /**
     * @generated from protobuf enum value: sql = 6;
     */
    sql = 6,
    /**
     * @generated from protobuf enum value: markdown = 7;
     */
    markdown = 7,
    /**
     * @generated from protobuf enum value: dockerfile = 8;
     */
    dockerfile = 8,
    /**
     * @generated from protobuf enum value: go = 9;
     */
    go = 9
}
// @generated message type with reflection information, may provide speed optimized methods
class Sprint$Type extends MessageType<Sprint> {
    constructor() {
        super("coding.Sprint", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "language", kind: "enum", T: () => ["coding.Language", Language] },
            { no: 4, name: "code_solution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "code_exercise", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "solved_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "failed_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "created_At", kind: "message", T: () => Timestamp },
            { no: 11, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tag }
        ]);
    }
    create(value?: PartialMessage<Sprint>): Sprint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.userId = "";
        message.language = 0;
        message.codeSolution = "";
        message.codeExercise = "";
        message.solvedCount = 0;
        message.failedCount = 0;
        message.title = "";
        message.description = "";
        message.tags = [];
        if (value !== undefined)
            reflectionMergePartial<Sprint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Sprint): Sprint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* coding.Language language */ 3:
                    message.language = reader.int32();
                    break;
                case /* string code_solution */ 4:
                    message.codeSolution = reader.string();
                    break;
                case /* string code_exercise */ 5:
                    message.codeExercise = reader.string();
                    break;
                case /* uint32 solved_count */ 6:
                    message.solvedCount = reader.uint32();
                    break;
                case /* uint32 failed_count */ 7:
                    message.failedCount = reader.uint32();
                    break;
                case /* string title */ 8:
                    message.title = reader.string();
                    break;
                case /* string description */ 9:
                    message.description = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_At */ 10:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* repeated tagging.Tag tags */ 11:
                    message.tags.push(Tag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Sprint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* coding.Language language = 3; */
        if (message.language !== 0)
            writer.tag(3, WireType.Varint).int32(message.language);
        /* string code_solution = 4; */
        if (message.codeSolution !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.codeSolution);
        /* string code_exercise = 5; */
        if (message.codeExercise !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.codeExercise);
        /* uint32 solved_count = 6; */
        if (message.solvedCount !== 0)
            writer.tag(6, WireType.Varint).uint32(message.solvedCount);
        /* uint32 failed_count = 7; */
        if (message.failedCount !== 0)
            writer.tag(7, WireType.Varint).uint32(message.failedCount);
        /* string title = 8; */
        if (message.title !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.title);
        /* string description = 9; */
        if (message.description !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.description);
        /* google.protobuf.Timestamp created_At = 10; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated tagging.Tag tags = 11; */
        for (let i = 0; i < message.tags.length; i++)
            Tag.internalBinaryWrite(message.tags[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.Sprint
 */
export const Sprint = new Sprint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Filter$Type extends MessageType<Filter> {
    constructor() {
        super("coding.Filter", [
            { no: 1, name: "languages", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["coding.Language", Language] },
            { no: 2, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fulltext_search", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Filter>): Filter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.languages = [];
        message.tags = [];
        message.fulltextSearch = "";
        if (value !== undefined)
            reflectionMergePartial<Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter): Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated coding.Language languages */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.languages.push(reader.int32());
                    else
                        message.languages.push(reader.int32());
                    break;
                case /* repeated string tags */ 2:
                    message.tags.push(reader.string());
                    break;
                case /* string fulltext_search */ 3:
                    message.fulltextSearch = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated coding.Language languages = 1; */
        if (message.languages.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.languages.length; i++)
                writer.int32(message.languages[i]);
            writer.join();
        }
        /* repeated string tags = 2; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.tags[i]);
        /* string fulltext_search = 3; */
        if (message.fulltextSearch !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fulltextSearch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.Filter
 */
export const Filter = new Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CodingActivity$Type extends MessageType<CodingActivity> {
    constructor() {
        super("coding.CodingActivity", [
            { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 2, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CodingActivity>): CodingActivity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<CodingActivity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CodingActivity): CodingActivity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp timestamp */ 1:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* int32 count */ 2:
                    message.count = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CodingActivity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp timestamp = 1; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 count = 2; */
        if (message.count !== 0)
            writer.tag(2, WireType.Varint).int32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.CodingActivity
 */
export const CodingActivity = new CodingActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSprintRequest$Type extends MessageType<CreateSprintRequest> {
    constructor() {
        super("coding.CreateSprintRequest", [
            { no: 1, name: "language", kind: "enum", T: () => ["coding.Language", Language] },
            { no: 2, name: "code_solution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code_exercise", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateSprintRequest>): CreateSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.language = 0;
        message.codeSolution = "";
        message.codeExercise = "";
        message.title = "";
        message.description = "";
        message.tags = [];
        if (value !== undefined)
            reflectionMergePartial<CreateSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSprintRequest): CreateSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* coding.Language language */ 1:
                    message.language = reader.int32();
                    break;
                case /* string code_solution */ 2:
                    message.codeSolution = reader.string();
                    break;
                case /* string code_exercise */ 3:
                    message.codeExercise = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* repeated string tags */ 6:
                    message.tags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* coding.Language language = 1; */
        if (message.language !== 0)
            writer.tag(1, WireType.Varint).int32(message.language);
        /* string code_solution = 2; */
        if (message.codeSolution !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.codeSolution);
        /* string code_exercise = 3; */
        if (message.codeExercise !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.codeExercise);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* repeated string tags = 6; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.tags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.CreateSprintRequest
 */
export const CreateSprintRequest = new CreateSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSprintRequest$Type extends MessageType<GetSprintRequest> {
    constructor() {
        super("coding.GetSprintRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSprintRequest>): GetSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSprintRequest): GetSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.GetSprintRequest
 */
export const GetSprintRequest = new GetSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSprintResponse$Type extends MessageType<CreateSprintResponse> {
    constructor() {
        super("coding.CreateSprintResponse", [
            { no: 1, name: "sprint", kind: "message", T: () => Sprint }
        ]);
    }
    create(value?: PartialMessage<CreateSprintResponse>): CreateSprintResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateSprintResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSprintResponse): CreateSprintResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* coding.Sprint sprint */ 1:
                    message.sprint = Sprint.internalBinaryRead(reader, reader.uint32(), options, message.sprint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSprintResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* coding.Sprint sprint = 1; */
        if (message.sprint)
            Sprint.internalBinaryWrite(message.sprint, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.CreateSprintResponse
 */
export const CreateSprintResponse = new CreateSprintResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SolvedSprintRequest$Type extends MessageType<SolvedSprintRequest> {
    constructor() {
        super("coding.SolvedSprintRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SolvedSprintRequest>): SolvedSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<SolvedSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SolvedSprintRequest): SolvedSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SolvedSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.SolvedSprintRequest
 */
export const SolvedSprintRequest = new SolvedSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FailedSprintRequest$Type extends MessageType<FailedSprintRequest> {
    constructor() {
        super("coding.FailedSprintRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FailedSprintRequest>): FailedSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<FailedSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FailedSprintRequest): FailedSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FailedSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.FailedSprintRequest
 */
export const FailedSprintRequest = new FailedSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSprintRequest$Type extends MessageType<UpdateSprintRequest> {
    constructor() {
        super("coding.UpdateSprintRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "language", kind: "enum", T: () => ["coding.Language", Language] },
            { no: 3, name: "code_solution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "code_exercise", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateSprintRequest>): UpdateSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.language = 0;
        message.codeSolution = "";
        message.codeExercise = "";
        message.title = "";
        message.description = "";
        message.tags = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSprintRequest): UpdateSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* coding.Language language */ 2:
                    message.language = reader.int32();
                    break;
                case /* string code_solution */ 3:
                    message.codeSolution = reader.string();
                    break;
                case /* string code_exercise */ 4:
                    message.codeExercise = reader.string();
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* repeated string tags */ 7:
                    message.tags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* coding.Language language = 2; */
        if (message.language !== 0)
            writer.tag(2, WireType.Varint).int32(message.language);
        /* string code_solution = 3; */
        if (message.codeSolution !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.codeSolution);
        /* string code_exercise = 4; */
        if (message.codeExercise !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.codeExercise);
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* repeated string tags = 7; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.tags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.UpdateSprintRequest
 */
export const UpdateSprintRequest = new UpdateSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSprintResponse$Type extends MessageType<UpdateSprintResponse> {
    constructor() {
        super("coding.UpdateSprintResponse", [
            { no: 1, name: "sprint", kind: "message", T: () => Sprint }
        ]);
    }
    create(value?: PartialMessage<UpdateSprintResponse>): UpdateSprintResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateSprintResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSprintResponse): UpdateSprintResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* coding.Sprint sprint */ 1:
                    message.sprint = Sprint.internalBinaryRead(reader, reader.uint32(), options, message.sprint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSprintResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* coding.Sprint sprint = 1; */
        if (message.sprint)
            Sprint.internalBinaryWrite(message.sprint, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.UpdateSprintResponse
 */
export const UpdateSprintResponse = new UpdateSprintResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSprintRequest$Type extends MessageType<DeleteSprintRequest> {
    constructor() {
        super("coding.DeleteSprintRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteSprintRequest>): DeleteSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSprintRequest): DeleteSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.DeleteSprintRequest
 */
export const DeleteSprintRequest = new DeleteSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSprintsRequest$Type extends MessageType<ListSprintsRequest> {
    constructor() {
        super("coding.ListSprintsRequest", [
            { no: 1, name: "page", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "filter", kind: "message", T: () => Filter }
        ]);
    }
    create(value?: PartialMessage<ListSprintsRequest>): ListSprintsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        if (value !== undefined)
            reflectionMergePartial<ListSprintsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSprintsRequest): ListSprintsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 page */ 1:
                    message.page = reader.uint32();
                    break;
                case /* coding.Filter filter */ 2:
                    message.filter = Filter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSprintsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).uint32(message.page);
        /* coding.Filter filter = 2; */
        if (message.filter)
            Filter.internalBinaryWrite(message.filter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.ListSprintsRequest
 */
export const ListSprintsRequest = new ListSprintsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSprintsResponse$Type extends MessageType<ListSprintsResponse> {
    constructor() {
        super("coding.ListSprintsResponse", [
            { no: 1, name: "sprints", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Sprint },
            { no: 2, name: "total_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListSprintsResponse>): ListSprintsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sprints = [];
        message.totalCount = 0;
        if (value !== undefined)
            reflectionMergePartial<ListSprintsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSprintsResponse): ListSprintsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated coding.Sprint sprints */ 1:
                    message.sprints.push(Sprint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 total_count */ 2:
                    message.totalCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSprintsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated coding.Sprint sprints = 1; */
        for (let i = 0; i < message.sprints.length; i++)
            Sprint.internalBinaryWrite(message.sprints[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 total_count = 2; */
        if (message.totalCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.ListSprintsResponse
 */
export const ListSprintsResponse = new ListSprintsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCodingActivityRequest$Type extends MessageType<GetCodingActivityRequest> {
    constructor() {
        super("coding.GetCodingActivityRequest", []);
    }
    create(value?: PartialMessage<GetCodingActivityRequest>): GetCodingActivityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetCodingActivityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCodingActivityRequest): GetCodingActivityRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetCodingActivityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.GetCodingActivityRequest
 */
export const GetCodingActivityRequest = new GetCodingActivityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCodingActivityResponse$Type extends MessageType<GetCodingActivityResponse> {
    constructor() {
        super("coding.GetCodingActivityResponse", [
            { no: 1, name: "activities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CodingActivity }
        ]);
    }
    create(value?: PartialMessage<GetCodingActivityResponse>): GetCodingActivityResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activities = [];
        if (value !== undefined)
            reflectionMergePartial<GetCodingActivityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCodingActivityResponse): GetCodingActivityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated coding.CodingActivity activities */ 1:
                    message.activities.push(CodingActivity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCodingActivityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated coding.CodingActivity activities = 1; */
        for (let i = 0; i < message.activities.length; i++)
            CodingActivity.internalBinaryWrite(message.activities[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message coding.GetCodingActivityResponse
 */
export const GetCodingActivityResponse = new GetCodingActivityResponse$Type();
/**
 * @generated ServiceType for protobuf service coding.CodingGrpcService
 */
export const CodingGrpcService = new ServiceType("coding.CodingGrpcService", [
    { name: "CreateSprint", options: {}, I: CreateSprintRequest, O: CreateSprintResponse },
    { name: "GetSprint", options: {}, I: GetSprintRequest, O: Sprint },
    { name: "GetCodingActivity", options: {}, I: GetCodingActivityRequest, O: GetCodingActivityResponse },
    { name: "UpdateSprint", options: {}, I: UpdateSprintRequest, O: UpdateSprintResponse },
    { name: "DeleteSprint", options: {}, I: DeleteSprintRequest, O: Empty },
    { name: "ListSprints", options: {}, I: ListSprintsRequest, O: ListSprintsResponse },
    { name: "SolvedSprint", options: {}, I: SolvedSprintRequest, O: Empty },
    { name: "FailedSprint", options: {}, I: FailedSprintRequest, O: Empty }
]);
